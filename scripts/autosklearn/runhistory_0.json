{
  "data": [
    [
      [
        1,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        0.18241869918699183,
        1.360114336013794,
        {
          "__enum__": "StatusType.SUCCESS"
        },
        1601057617.6366947,
        1601057619.0266488,
        {
          "duration": 1.2728443145751953,
          "num_run": 2,
          "train_loss": 0.01693750000000005,
          "configuration_origin": "Default"
        }
      ]
    ],
    [
      [
        2,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        0.358739837398374,
        0.3380241394042969,
        {
          "__enum__": "StatusType.SUCCESS"
        },
        1601057619.0428278,
        1601057619.4118998,
        {
          "duration": 0.2729659080505371,
          "num_run": 3,
          "train_loss": 0.2500312499999999,
          "configuration_origin": "Random Search"
        }
      ]
    ],
    [
      [
        3,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        1,
        0.3109886646270752,
        {
          "__enum__": "StatusType.CRASHED"
        },
        1601057619.4189472,
        1601057619.7593534,
        {
          "traceback": "Traceback (most recent call last):\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/__init__.py\", line 29, in fit_predict_try_except_decorator\n    return ta(queue=queue, **kwargs)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 1067, in eval_holdout\n    evaluator.fit_predict_and_loss(iterative=iterative)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 463, in fit_predict_and_loss\n    add_model_to_self=self.num_cv_folds == 1,\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 804, in _partial_fit_and_predict_standard\n    self.Y_train[train_indices],\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/abstract_evaluator.py\", line 110, in _fit_and_suppress_warnings\n    model.fit(X, y)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/base.py\", line 91, in fit\n    X, fit_params = self.fit_transformer(X, y, **fit_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/classification.py\", line 98, in fit_transformer\n    X, y, fit_params=fit_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/base.py\", line 101, in fit_transformer\n    Xt, fit_params = self._fit(X, y, **fit_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/sklearn/pipeline.py\", line 315, in _fit\n    **fit_params_steps[name])\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/joblib/memory.py\", line 352, in __call__\n    return self.func(*args, **kwargs)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/sklearn/pipeline.py\", line 730, in _fit_transform_one\n    res = transformer.fit(X, y, **fit_params).transform(X)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/components/feature_preprocessing/factor_analysis.py\", line 46, in transform\n    return self.preprocessor.transform(X)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/sklearn/decomposition/_factor_analysis.py\", line 266, in transform\n    check_is_fitted(self)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/sklearn/utils/validation.py\", line 967, in check_is_fitted\n    raise NotFittedError(msg % {'name': type(estimator).__name__})\nsklearn.exceptions.NotFittedError: This FactorAnalysis instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.\n",
          "error": "NotFittedError(\"This FactorAnalysis instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.\")",
          "configuration_origin": "Random Search"
        }
      ]
    ],
    [
      [
        4,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        0.26994410569105687,
        0.4769771099090576,
        {
          "__enum__": "StatusType.SUCCESS"
        },
        1601057621.8450477,
        1601057622.3516314,
        {
          "duration": 0.4092874526977539,
          "num_run": 5,
          "train_loss": 0.03684374999999995,
          "configuration_origin": "Random Search (sorted)"
        }
      ]
    ],
    [
      [
        5,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        0.18203760162601623,
        0.5256485939025879,
        {
          "__enum__": "StatusType.SUCCESS"
        },
        1601057622.3558555,
        1601057622.9120488,
        {
          "duration": 0.4613034725189209,
          "num_run": 6,
          "train_loss": 0.1489062499999999,
          "configuration_origin": "Random Search (sorted)"
        }
      ]
    ],
    [
      [
        6,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        0.21519308943089432,
        1.0779454708099365,
        {
          "__enum__": "StatusType.SUCCESS"
        },
        1601057622.9481072,
        1601057624.0550294,
        {
          "duration": 1.0139894485473633,
          "num_run": 7,
          "train_loss": 0.016031250000000052,
          "configuration_origin": "Random Search"
        }
      ]
    ],
    [
      [
        7,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        1,
        0.22028851509094238,
        {
          "__enum__": "StatusType.CRASHED"
        },
        1601057626.4840822,
        1601057626.7337463,
        {
          "traceback": "Traceback (most recent call last):\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/__init__.py\", line 29, in fit_predict_try_except_decorator\n    return ta(queue=queue, **kwargs)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 1067, in eval_holdout\n    evaluator.fit_predict_and_loss(iterative=iterative)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 463, in fit_predict_and_loss\n    add_model_to_self=self.num_cv_folds == 1,\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 796, in _partial_fit_and_predict_standard\n    model = self._get_model()\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/abstract_evaluator.py\", line 226, in _get_model\n    init_params=self._init_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/classification.py\", line 77, in __init__\n    random_state, init_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/base.py\", line 55, in __init__\n    self.set_hyperparameters(self.config, init_params=init_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/base.py\", line 206, in set_hyperparameters\n    init_params=sub_init_params_dict)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/components/base.py\", line 404, in set_hyperparameters\n    self.choice = self.get_components()[choice](**new_params)\nTypeError: __init__() got an unexpected keyword argument 'k'\n",
          "error": "TypeError(\"__init__() got an unexpected keyword argument 'k'\")",
          "configuration_origin": "Random Search (sorted)"
        }
      ]
    ],
    [
      [
        8,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        1,
        29.027379512786865,
        {
          "__enum__": "StatusType.TIMEOUT"
        },
        1601057629.55508,
        1601057659.6131136,
        {
          "error": "Timeout",
          "configuration_origin": "Random Search (sorted)"
        }
      ]
    ],
    [
      [
        9,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        0.5,
        0.40248537063598633,
        {
          "__enum__": "StatusType.SUCCESS"
        },
        1601057659.6197271,
        1601057660.0540595,
        {
          "duration": 0.336245059967041,
          "num_run": 10,
          "train_loss": 0.5,
          "configuration_origin": "Random Search"
        }
      ]
    ],
    [
      [
        10,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        0.21100101626016265,
        0.4340505599975586,
        {
          "__enum__": "StatusType.SUCCESS"
        },
        1601057660.0924215,
        1601057660.5588233,
        {
          "duration": 0.36113953590393066,
          "num_run": 11,
          "train_loss": 0.19737499999999997,
          "configuration_origin": "Random Search"
        }
      ]
    ],
    [
      [
        11,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        0.20007621951219512,
        0.4509701728820801,
        {
          "__enum__": "StatusType.SUCCESS"
        },
        1601057663.9690323,
        1601057664.4487302,
        {
          "duration": 0.3845639228820801,
          "num_run": 12,
          "train_loss": 0.18243750000000003,
          "configuration_origin": "Random Search (sorted)"
        }
      ]
    ],
    [
      [
        12,
        "{\"task_id\": \"058929c938ac8152e85532aeab12ce80\"}",
        0,
        0.0
      ],
      [
        1,
        0.39839649200439453,
        {
          "__enum__": "StatusType.CRASHED"
        },
        1601057664.4837556,
        1601057664.9147716,
        {
          "traceback": "Traceback (most recent call last):\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/__init__.py\", line 29, in fit_predict_try_except_decorator\n    return ta(queue=queue, **kwargs)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 1067, in eval_holdout\n    evaluator.fit_predict_and_loss(iterative=iterative)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 463, in fit_predict_and_loss\n    add_model_to_self=self.num_cv_folds == 1,\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/train_evaluator.py\", line 804, in _partial_fit_and_predict_standard\n    self.Y_train[train_indices],\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/evaluation/abstract_evaluator.py\", line 110, in _fit_and_suppress_warnings\n    model.fit(X, y)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/base.py\", line 91, in fit\n    X, fit_params = self.fit_transformer(X, y, **fit_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/classification.py\", line 98, in fit_transformer\n    X, y, fit_params=fit_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/base.py\", line 101, in fit_transformer\n    Xt, fit_params = self._fit(X, y, **fit_params)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/sklearn/pipeline.py\", line 315, in _fit\n    **fit_params_steps[name])\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/joblib/memory.py\", line 352, in __call__\n    return self.func(*args, **kwargs)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/sklearn/pipeline.py\", line 730, in _fit_transform_one\n    res = transformer.fit(X, y, **fit_params).transform(X)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/lib/auto-sklearn/autosklearn/pipeline/components/feature_preprocessing/bernoulli_rbm.py\", line 33, in transform\n    return self.preprocessor.transform(X)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/sklearn/neural_network/_rbm.py\", line 124, in transform\n    check_is_fitted(self)\n  File \"/mnt/c/local/phd/exisiting_solutions/automlbenchmark/frameworks/autosklearn/venv/lib/python3.7/site-packages/sklearn/utils/validation.py\", line 967, in check_is_fitted\n    raise NotFittedError(msg % {'name': type(estimator).__name__})\nsklearn.exceptions.NotFittedError: This BernoulliRBM instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.\n",
          "error": "NotFittedError(\"This BernoulliRBM instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.\")",
          "configuration_origin": "Random Search"
        }
      ]
    ]
  ],
  "config_origins": {
    "1": "Default",
    "2": "Random Search",
    "3": "Random Search",
    "4": "Random Search (sorted)",
    "5": "Random Search (sorted)",
    "6": "Random Search",
    "7": "Random Search (sorted)",
    "8": "Random Search (sorted)",
    "9": "Random Search",
    "10": "Random Search",
    "11": "Random Search (sorted)",
    "12": "Random Search"
  },
  "configs": {
    "1": {
      "balancing:strategy": "none",
      "classifier:__choice__": "random_forest",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "one_hot_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "minority_coalescer",
      "data_preprocessing:numerical_transformer:imputation:strategy": "mean",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "standardize",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.0001,
      "feature_preprocessor:__choice__": "pca",
      "classifier:random_forest:bootstrap": "True",
      "classifier:random_forest:criterion": "gini",
      "classifier:random_forest:max_depth": "None",
      "classifier:random_forest:max_features": 0.5,
      "classifier:random_forest:max_leaf_nodes": "None",
      "classifier:random_forest:min_impurity_decrease": 0.0,
      "classifier:random_forest:min_samples_leaf": 1,
      "classifier:random_forest:min_samples_split": 2,
      "classifier:random_forest:min_weight_fraction_leaf": 0.0,
      "data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction": 0.01,
      "feature_preprocessor:pca:keep_variance": 0.9999,
      "feature_preprocessor:pca:whiten": "False"
    },
    "2": {
      "balancing:strategy": "none",
      "classifier:__choice__": "sgd",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "no_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "no_coalescense",
      "data_preprocessing:numerical_transformer:imputation:strategy": "median",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "normalize",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.11523465189410945,
      "feature_preprocessor:__choice__": "binarizer",
      "classifier:sgd:alpha": 1.2140814828083227e-07,
      "classifier:sgd:average": "False",
      "classifier:sgd:fit_intercept": "False",
      "classifier:sgd:learning_rate": "invscaling",
      "classifier:sgd:loss": "perceptron",
      "classifier:sgd:penalty": "elasticnet",
      "classifier:sgd:tol": 0.00014135581542050132,
      "feature_preprocessor:binarizer:threshold": 0.0,
      "classifier:sgd:eta0": 9.902644439629864e-06,
      "classifier:sgd:l1_ratio": 3.63906350894169e-08,
      "classifier:sgd:power_t": 0.3500133871564166
    },
    "3": {
      "balancing:strategy": "none",
      "classifier:__choice__": "bernoulli_nb",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "no_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "no_coalescense",
      "data_preprocessing:numerical_transformer:imputation:strategy": "median",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "none",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.049449907887626404,
      "feature_preprocessor:__choice__": "factor_analysis",
      "classifier:bernoulli_nb:alpha": 4.291769897382856,
      "classifier:bernoulli_nb:fit_prior": "True",
      "feature_preprocessor:factor_analysis:max_iter": 601,
      "feature_preprocessor:factor_analysis:n_components": 187,
      "feature_preprocessor:factor_analysis:svd_method": "lapack",
      "feature_preprocessor:factor_analysis:tol": 0.0016260803166760088
    },
    "4": {
      "balancing:strategy": "weighting",
      "classifier:__choice__": "decision_tree",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "one_hot_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "minority_coalescer",
      "data_preprocessing:numerical_transformer:imputation:strategy": "mean",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "maxabs",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.06232624322856886,
      "feature_preprocessor:__choice__": "fast_ica",
      "classifier:decision_tree:criterion": "entropy",
      "classifier:decision_tree:max_depth_factor": 1.7165973077012924,
      "classifier:decision_tree:max_features": 1.0,
      "classifier:decision_tree:max_leaf_nodes": "None",
      "classifier:decision_tree:min_impurity_decrease": 0.0,
      "classifier:decision_tree:min_samples_leaf": 7,
      "classifier:decision_tree:min_samples_split": 4,
      "classifier:decision_tree:min_weight_fraction_leaf": 0.0,
      "data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction": 0.49060749623013844,
      "feature_preprocessor:fast_ica:algorithm": "deflation",
      "feature_preprocessor:fast_ica:fun": "cube",
      "feature_preprocessor:fast_ica:whiten": "False"
    },
    "5": {
      "balancing:strategy": "weighting",
      "classifier:__choice__": "decision_tree",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "one_hot_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "minority_coalescer",
      "data_preprocessing:numerical_transformer:imputation:strategy": "most_frequent",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "minmax",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.15515377499908345,
      "feature_preprocessor:__choice__": "random_trees_embedding",
      "classifier:decision_tree:criterion": "gini",
      "classifier:decision_tree:max_depth_factor": 1.6205828248653928,
      "classifier:decision_tree:max_features": 1.0,
      "classifier:decision_tree:max_leaf_nodes": "None",
      "classifier:decision_tree:min_impurity_decrease": 0.0,
      "classifier:decision_tree:min_samples_leaf": 12,
      "classifier:decision_tree:min_samples_split": 9,
      "classifier:decision_tree:min_weight_fraction_leaf": 0.0,
      "data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction": 0.007143101744443874,
      "feature_preprocessor:random_trees_embedding:bootstrap": "False",
      "feature_preprocessor:random_trees_embedding:max_depth": 2,
      "feature_preprocessor:random_trees_embedding:max_leaf_nodes": "None",
      "feature_preprocessor:random_trees_embedding:min_samples_leaf": 15,
      "feature_preprocessor:random_trees_embedding:min_samples_split": 10,
      "feature_preprocessor:random_trees_embedding:min_weight_fraction_leaf": 1.0,
      "feature_preprocessor:random_trees_embedding:n_estimators": 78
    },
    "6": {
      "balancing:strategy": "weighting",
      "classifier:__choice__": "gradient_boosting",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "one_hot_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "minority_coalescer",
      "data_preprocessing:numerical_transformer:imputation:strategy": "median",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "quantile_transformer",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.004024876778911046,
      "feature_preprocessor:__choice__": "feature_agglomeration",
      "classifier:gradient_boosting:early_stop": "off",
      "classifier:gradient_boosting:l2_regularization": 0.00010665211336462981,
      "classifier:gradient_boosting:learning_rate": 0.08763525382099328,
      "classifier:gradient_boosting:loss": "auto",
      "classifier:gradient_boosting:max_bins": 255,
      "classifier:gradient_boosting:max_depth": "None",
      "classifier:gradient_boosting:max_leaf_nodes": 22,
      "classifier:gradient_boosting:min_samples_leaf": 42,
      "classifier:gradient_boosting:scoring": "loss",
      "classifier:gradient_boosting:tol": 1e-07,
      "data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction": 0.10844483122305067,
      "data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles": 562,
      "data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution": "uniform",
      "feature_preprocessor:feature_agglomeration:affinity": "euclidean",
      "feature_preprocessor:feature_agglomeration:linkage": "average",
      "feature_preprocessor:feature_agglomeration:n_clusters": 60,
      "feature_preprocessor:feature_agglomeration:pooling_func": "mean"
    },
    "7": {
      "balancing:strategy": "weighting",
      "classifier:__choice__": "lda",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "one_hot_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "minority_coalescer",
      "data_preprocessing:numerical_transformer:imputation:strategy": "mean",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "minmax",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.010603282317838957,
      "feature_preprocessor:__choice__": "select_k_best",
      "classifier:lda:n_components": 102,
      "classifier:lda:shrinkage": "None",
      "classifier:lda:tol": 0.04223436158284106,
      "data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction": 0.08046209990323182,
      "feature_preprocessor:select_k_best:k": 38,
      "feature_preprocessor:select_k_best:score_func": "f_classif"
    },
    "8": {
      "balancing:strategy": "weighting",
      "classifier:__choice__": "adaboost",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "one_hot_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "no_coalescense",
      "data_preprocessing:numerical_transformer:imputation:strategy": "most_frequent",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "standardize",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.01702814769457328,
      "feature_preprocessor:__choice__": "polynomial",
      "classifier:adaboost:algorithm": "SAMME",
      "classifier:adaboost:learning_rate": 0.052810264402743654,
      "classifier:adaboost:max_depth": 6,
      "classifier:adaboost:n_estimators": 410,
      "feature_preprocessor:polynomial:degree": 3,
      "feature_preprocessor:polynomial:include_bias": "False",
      "feature_preprocessor:polynomial:interaction_only": "False"
    },
    "9": {
      "balancing:strategy": "none",
      "classifier:__choice__": "gradient_boosting",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "one_hot_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "no_coalescense",
      "data_preprocessing:numerical_transformer:imputation:strategy": "most_frequent",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "normalize",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.13892501995734244,
      "feature_preprocessor:__choice__": "missing_indicator",
      "classifier:gradient_boosting:early_stop": "valid",
      "classifier:gradient_boosting:l2_regularization": 1.938594879781529e-09,
      "classifier:gradient_boosting:learning_rate": 0.028284134587420236,
      "classifier:gradient_boosting:loss": "auto",
      "classifier:gradient_boosting:max_bins": 255,
      "classifier:gradient_boosting:max_depth": "None",
      "classifier:gradient_boosting:max_leaf_nodes": 345,
      "classifier:gradient_boosting:min_samples_leaf": 1,
      "classifier:gradient_boosting:scoring": "loss",
      "classifier:gradient_boosting:tol": 1e-07,
      "feature_preprocessor:missing_indicator:features": "all",
      "classifier:gradient_boosting:n_iter_no_change": 17,
      "classifier:gradient_boosting:validation_fraction": 0.3262151950048594
    },
    "10": {
      "balancing:strategy": "weighting",
      "classifier:__choice__": "decision_tree",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "no_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "minority_coalescer",
      "data_preprocessing:numerical_transformer:imputation:strategy": "median",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "quantile_transformer",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.028162571960300243,
      "feature_preprocessor:__choice__": "generic_univariate_select",
      "classifier:decision_tree:criterion": "entropy",
      "classifier:decision_tree:max_depth_factor": 0.9653092714907221,
      "classifier:decision_tree:max_features": 1.0,
      "classifier:decision_tree:max_leaf_nodes": "None",
      "classifier:decision_tree:min_impurity_decrease": 0.0,
      "classifier:decision_tree:min_samples_leaf": 11,
      "classifier:decision_tree:min_samples_split": 10,
      "classifier:decision_tree:min_weight_fraction_leaf": 0.0,
      "data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction": 0.054829776808032575,
      "data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles": 704,
      "data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution": "normal",
      "feature_preprocessor:generic_univariate_select:mode": "fwe",
      "feature_preprocessor:generic_univariate_select:param": 0.0421088871357738,
      "feature_preprocessor:generic_univariate_select:score_func": "f_regression"
    },
    "11": {
      "balancing:strategy": "weighting",
      "classifier:__choice__": "bernoulli_nb",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "one_hot_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "minority_coalescer",
      "data_preprocessing:numerical_transformer:imputation:strategy": "most_frequent",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "quantile_transformer",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.14292892089979417,
      "feature_preprocessor:__choice__": "kernel_pca",
      "classifier:bernoulli_nb:alpha": 0.0402517962611286,
      "classifier:bernoulli_nb:fit_prior": "True",
      "data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction": 0.05430197749482936,
      "data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles": 515,
      "data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution": "normal",
      "feature_preprocessor:kernel_pca:kernel": "cosine",
      "feature_preprocessor:kernel_pca:n_components": 1638
    },
    "12": {
      "balancing:strategy": "weighting",
      "classifier:__choice__": "gradient_boosting",
      "data_preprocessing:categorical_transformer:categorical_encoding:__choice__": "no_encoding",
      "data_preprocessing:categorical_transformer:category_coalescence:__choice__": "no_coalescense",
      "data_preprocessing:numerical_transformer:imputation:strategy": "mean",
      "data_preprocessing:numerical_transformer:rescaling:__choice__": "normalize",
      "data_preprocessing:numerical_transformer:variance_threshold:threshold": 0.11193543280861286,
      "feature_preprocessor:__choice__": "bernoulli_rbm",
      "classifier:gradient_boosting:early_stop": "train",
      "classifier:gradient_boosting:l2_regularization": 6.364096972125227e-07,
      "classifier:gradient_boosting:learning_rate": 0.20458105322616474,
      "classifier:gradient_boosting:loss": "auto",
      "classifier:gradient_boosting:max_bins": 255,
      "classifier:gradient_boosting:max_depth": "None",
      "classifier:gradient_boosting:max_leaf_nodes": 1058,
      "classifier:gradient_boosting:min_samples_leaf": 2,
      "classifier:gradient_boosting:scoring": "loss",
      "classifier:gradient_boosting:tol": 1e-07,
      "feature_preprocessor:bernoulli_rbm:batch_size": 94,
      "feature_preprocessor:bernoulli_rbm:learning_rate": 0.5818549813308649,
      "feature_preprocessor:bernoulli_rbm:n_components": 501,
      "feature_preprocessor:bernoulli_rbm:n_iter": 95,
      "classifier:gradient_boosting:n_iter_no_change": 16
    }
  }
}